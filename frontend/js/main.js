import { login, cadastrarInfo, cadastrarEmail, auth, fs } from "./firebase.js";
import { doc, getDoc, setDoc } from "https://www.gstatic.com/firebasejs/11.8.0/firebase-firestore.js";
import { startVideoCall, handleVideoOffer, handleVideoAnswer, handleIceCandidate, initVideoCallModule } from './call.js';
import { createMessageSelfElement, createMessageOtherElement } from "./messages.js"

const socket = new WebSocket('wss://teste-chat-backend.onrender.com');

const urlParams = new URLSearchParams(window.location.search);
const room = urlParams.get('room') || 'default-room';

const user = { id: "", name:"", color: "" };
let selectedPrivateRecipient = null;
let onlineUsersCache = [];
let currentRoom = room;
const url = window.location.href;
const tempo = new Date().toLocaleTimeString([], { hour:"2-digit", minute:"2-digit"});
const ADMINS = ['1@gmail.com', 'admin2@teste.com'];
let userEmail = ''; // vai armazenar o email logado

initVideoCallModule(socket, user);

// Em eventos do socket:
socket.addEventListener('message', async (event) => {
    const msg = JSON.parse(event.data);

    if (msg.type === 'video-offer' && msg.to === user.id) {
        await handleVideoOffer(msg);
    } else if (msg.type === 'video-answer' && msg.to === user.id) {
        await handleVideoAnswer(msg);
    } else if (msg.type === 'video-candidate' && msg.to === user.id) {
        await handleIceCandidate(msg);
    }
});

// login elements
const loginSection = document.querySelector(".card");
const loginName = loginSection.querySelector(".login__name");


// chat elements
const sidebar = document.querySelector(".sidebar")
const chat = document.querySelector(".chat");
const chatForm = chat.querySelector(".chat__form");
const chatInput = chat.querySelector(".chat__input");
const chatMessages = chat.querySelector(".chat__messages");
const privateChatHeader = document.getElementById("privateChatHeader");
const privateChatText = document.getElementById("privateChatText");
const exitPrivateChatBtn = document.getElementById("exitPrivateChatBtn");

const colors = [
    "aqua",
    "aquamarine",
    "blueviolet",
    "deeppink",
    "chocolate",
    "crimson",
    "gold",
    "hotpink",
    "cadetblue",
    "darkgoldenrod",
    "cornflowerblue",
    "darkkhaki",
    "chartreuse",
    "cyan",
    "firebrick"
]

const rtcConfig = {
    iceServers: [{ urls: "stun:stun.l.google.com:19302" }] // servidor STUN gratuito
};

document.getElementById('showRegister').addEventListener('click', function(e) {
  e.preventDefault();
  document.getElementById('card').classList.add('flipped');
});

document.getElementById('showLogin').addEventListener('click', function(e) {
  e.preventDefault();
  document.getElementById('card').classList.remove('flipped');
});

const createCallButton = (userId, userName) => {
    const btn = document.createElement("button");
    btn.textContent = "üìû Ligar";
    btn.style.marginLeft = "10px";
    btn.addEventListener("click", () => {
        startVideoCall(userId, userName);
    });
    return btn;
};

function getPrivateRoomId(userId1, userId2) {
  // Ordena para que o ID da sala seja sempre o mesmo, independente de quem criou
  return [userId1, userId2].sort().join('_');
}

function updatePrivateChatHeader() {
    if (selectedPrivateRecipient) {
        privateChatText.textContent = `Conversando com ${selectedPrivateRecipient.name}`;
        privateChatHeader.style.display = "flex";
    } else {
        privateChatHeader.style.display = "none";
    }
}

exitPrivateChatBtn.addEventListener("click", () => {
    selectedPrivateRecipient = null;
    updatePrivateChatHeader();

    // Voltar para sala p√∫blica
    socket.send(JSON.stringify({
        type: 'joinPrivateRoom',
        room: room, // sala p√∫blica padr√£o (ex: 'default-room')
        userId: user.id,
        userName: user.name,
        userColor: user.color
    }));
    currentRoom = room
    alert("Voc√™ saiu da conversa privada.");
});

// Receber lista de usu√°rios online
socket.addEventListener('message', async (event) => {
    const msg = JSON.parse(event.data);

    if (msg.type === 'banned') {
        alert(msg.reason || "Voc√™ foi banido pelo administrador.");
        socket.close();
        window.location.reload();
        return;
    }

    if (msg.type === "onlineUsers") {
        onlineUsersCache = msg.users;

        // Atualiza lista lateral de usu√°rios (sem bot√£o)
        const listContainer = document.getElementById('onlineUsersSidebarList');
        listContainer.innerHTML = '';
        msg.users.forEach(onlineUser => {
            const li = document.createElement('li');
            li.textContent = onlineUser.name;
            li.dataset.id = onlineUser.id;
            li.style.cursor = "pointer";

            // Se for admin, adiciona bot√£o de banir para cada usu√°rio (exceto ele mesmo)
            if (ADMINS.includes(userEmail) && onlineUser.id !== user.id) {
                const banBtn = document.createElement("button");
                banBtn.textContent = "üö´ Banir";
                banBtn.style.marginLeft = "10px";
                banBtn.addEventListener("click", () => {
                    if (confirm(`Tem certeza que deseja banir ${onlineUser.name}?`)) {
                        socket.send(JSON.stringify({
                            type: "ban-user",
                            targetId: onlineUser.id
                        }));
                    }
                });
                li.appendChild(banBtn);
            }

            listContainer.appendChild(li);
        });

        // Atualiza lista com bot√£o de chamada
        const callListContainer = document.getElementById('callUsersSidebarList');
        callListContainer.innerHTML = '';
        msg.users.forEach(onlineUser => {
            const li = document.createElement('li');
            li.textContent = onlineUser.name;
            li.dataset.id = onlineUser.id;

            // Evita adicionar bot√£o para o pr√≥prio usu√°rio
            if (onlineUser.id !== user.id) {
                const callBtn = createCallButton(onlineUser.id, onlineUser.name);
                li.appendChild(callBtn);
            }

            callListContainer.appendChild(li);
        });
    } else if (msg.type === "aviso") {
        const avisosList = document.getElementById("avisosList");

        const li = document.createElement("li");
        li.textContent = msg.content;
        li.classList.add("aviso-item");

        // Se for admin, adiciona bot√£o de remo√ß√£o
        if (ADMINS.includes(userEmail)) {
            const removeBtn = document.createElement("button");
            removeBtn.textContent = "Remover";
            removeBtn.style.marginLeft = "10px";
            removeBtn.addEventListener("click", () => {
                li.remove();
            });
            li.appendChild(removeBtn);
        }

        avisosList.appendChild(li);

        // Tempo customiz√°vel
        const duration = msg.duration && !isNaN(msg.duration) ? msg.duration : 10;

        // Auto remover ap√≥s x segundos
        if (duration > 0) {
        setTimeout(() => {
            li.style.transition = "opacity 1s ease";
            li.style.opacity = "0";
            setTimeout(() => {
                li.remove();
            }, 1000);
        }, duration * 1000);
    }
    } else if (msg.type === "message") {
        const { userId, userName, userColor, content, image, gif, audio, video, file, fileName, timestamp, } = msg;

        const message = userId === user.id
            ? createMessageSelfElement(content, image, gif, audio, video, file, fileName, timestamp, msg.privateTo)
            : createMessageOtherElement(content, userName, userColor, image, gif, audio, video, file, fileName, timestamp, msg.privateTo);

        chatMessages.appendChild(message);
        scrollScreen();
    }
});

const socialLinksForm = document.getElementById('socialLinksForm');
const savedSocialLinks = document.getElementById('savedSocialLinks');

auth.onAuthStateChanged(async (user) => {
    if (user) {
        const userDocRef = doc(fs, "usuarios", user.uid);
        const userDocSnap = await getDoc(userDocRef);

        let nome = "";

        if (userDocSnap.exists()) {
            nome = userDocSnap.data().nome;
        } else {
            // Se o nome n√£o existir, pedir via prompt ou modal
            nome = prompt("Qual √© o seu nome?");
            if (nome) {
                await setDoc(userDocRef, { nome });
            } else {
                nome = "An√¥nimo";
            }
        }

        // agora sim use esse nome
        user.name = nome;

        // exemplo:
        await salvarLinksSociais(user.uid, { instagram: "...", github: "..." }, nome);
    }
});

// Carregar e exibir os links de todos
async function carregarTodosLinksSociais() {
    const dados = await obterTodosLinksSociais();

    savedSocialLinks.innerHTML = "<h4>Redes de todos os usu√°rios</h4>";

    for (const [userId, links] of Object.entries(dados)) {
        savedSocialLinks.innerHTML += `
            <div style="margin-bottom: 10px;">
                <strong>Usu√°rio:</strong> ${links.nome || userId.slice(0, 6)}<br/>
                ${links.instagram ? `<a href="${links.instagram}" target="_blank">Instagram</a><br/>` : ""}
                ${links.linkedin ? `<a href="${links.linkedin}" target="_blank">LinkedIn</a><br/>` : ""}
                ${links.github ? `<a href="${links.github}" target="_blank">GitHub</a><br/>` : ""}
            </div>
        `;
    }
}

const loginButton = document.querySelector(".login__button");
const loginError = document.querySelector(".login-error");

loginButton.addEventListener('click', async (event) => {
    event.preventDefault()
    const email = document.querySelector(".login__email").value;
    const password = document.querySelector(".login__password").value;
    const name = document.querySelector(".login__name").value;


    const result = await login(email, password);
    await cadastrarEmail(name, email)

    if (result.success) {
            userEmail = email;
            user.id = crypto.randomUUID();
            user.name = loginName.value;
            user.color = getRandomColor();
        
            loginSection.style.display = "none";
            chat.style.display = "flex";
            sidebar.style.display = "flex";
        
            if (socket.readyState === WebSocket.OPEN) {
                socket.send(JSON.stringify({ type: "login", id: user.id, name: user.name, userColor: user.color, room }));
            } else {
                socket.addEventListener('open', () => {
                    socket.send(JSON.stringify({ type: "login", id: user.id, name: user.name, userColor: user.color, room }));
                });
            }
    } else {
        loginError.textContent = "Erro: " + result.message;
    }
    if (ADMINS.includes(userEmail)) {
        document.getElementById('adminAvisoPanel').style.display = "block";
    }
});

document.getElementById("avisoForm").addEventListener("submit", (e) => {
    e.preventDefault();

    const aviso = document.getElementById("avisoInput").value.trim();
    const tempo = parseInt(document.getElementById("avisoTempo").value.trim());

    if (!aviso || isNaN(tempo)) return;

    socket.send(JSON.stringify({
        type: 'aviso',
        content: aviso,
        duration: tempo  // envia tempo para o servidor/clientes
    }));

    document.getElementById("avisoInput").value = "";
    document.getElementById("avisoTempo").value = "10";
});

document.querySelectorAll('.sidebar button').forEach(button => {
  button.addEventListener('click', () => {
    const panelId = button.getAttribute('data-panel');
    const panel = document.getElementById('panel-' + panelId);

    if (!panel) return;

    const isActive = panel.classList.contains('active');

    // Remove todas as abas ativas
    document.querySelectorAll('.sidebar-panel').forEach(p => {
      p.classList.remove('active');
      p.style.display = 'none';
    });

    if (!isActive) {
      panel.classList.add('active');
      panel.style.display = 'block';
    }
  });
});


window.addEventListener("DOMContentLoaded", () => {
  // Usu√°rios Online ‚Äì copia do painel original para o lateral
  const onlineOriginal = document.getElementById("onlineUsersSidebarList");
  const onlineSidebar = document.getElementById("onlineUsersSidebarList");

  const syncOnlineUsers = () => {
    onlineSidebar.innerHTML = onlineOriginal.innerHTML;
  };
  setInterval(syncOnlineUsers, 1000); // atualiza a cada 1s

  // Avisos ‚Äì conte√∫do e formul√°rio
  const avisosOriginal = document.getElementById("avisosContent");
  const adminFormOriginal = document.getElementById("adminAvisoPanel");
  const avisosSidebar = document.getElementById("avisosSidebarContent");
  const formSidebar = document.getElementById("adminAvisoPanelSidebar");

  // Mover apenas uma vez ap√≥s o carregamento
  if(avisosSidebar){
  avisosSidebar.appendChild(avisosOriginal);
  formSidebar.appendChild(adminFormOriginal);
  }
});

// Emojis
const emojiPicker = document.getElementById("emojiPicker");
const emojis = ["üòÄ", "üòÅ", "üòÇ", "ü§£", "üòÉ", "üòÑ", "üòÖ", "üòÜ", "üòâ", "üòä","üòã", "üòé", "üòç", "üòò", "ü•∞", "üòó", "üòô", "üòö", "üôÇ", "ü§ó","ü§©", "ü§î", "ü§®", "üòê", "üòë", "üò∂", "üôÑ", "üòè", "üò£", "üò•","üòÆ", "ü§ê", "üòØ", "üò™", "üò´", "ü•±", "üò¥", "üòå", "üòõ", "üòú","üòù", "ü§§", "üòí", "üòì", "üòî", "üòï", "üôÉ", "ü§ë", "üò≤", "‚òπÔ∏è","üôÅ", "üòñ", "üòû", "üòü", "üò§", "üò¢", "üò≠", "üò¶", "üòß", "üò®","üò©", "ü§Ø", "üò¨", "üò∞", "üò±", "ü•µ", "ü•∂", "üò≥", "ü§™", "üòµ","üò°", "üò†", "üò∑", "ü§í", "ü§ï", "ü§ß", "üòá","ü•≥", "ü•∏", "üòà", "üëø", "üíÄ", "‚ò†Ô∏è", "üëª", "üëæ", "ü§ñ","üéÉ", "üò∫", "üò∏", "üòπ", "üòª", "üòº", "üòΩ", "üôÄ", "üòø", "üòæ","üåÄ", "üåÅ", "üåÇ", "üåÉ", "üåÑ", "üåÖ", "üåÜ", "üåá", "üåà", "üåâ", "üåå", "üåç", "üåé", "üåè", "üåê", "üåë", "üåí", "üåì","üåî", "üåï", "üåñ", "üåó", "üåò", "üåô", "üåö", "üåõ", "üåú", "üåù","üåû", "üåü", "üå†", "üå°", "üå¢", "üå£", "üå§", "üå•", "üå¶", "üåß","üå®", "üå©", "üå™", "üå≠", "üåÆ", "üåØ", "üå∞", "üå±","üå≤", "üå≥", "üå¥", "üåµ", "üå∂", "üå∑", "üå∏", "üåπ", "üå∫", "üåª","üåº", "üåΩ", "üåæ", "üåø", "üçÄ", "üçÅ", "üçÇ", "üçÉ", "üçÑ", "üçÖ","üçÜ", "üçá", "üçà", "üçâ", "üçä", "üçã", "üçå", "üçç", "üçé", "üçè","üçê", "üçë", "üçí", "üçì", "üçî", "üçï", "üçñ", "üçó", "üçò", "üçô","üçö", "üçõ", "üçú", "üçù", "üçû", "üçü", "üç†", "üç°", "üç¢", "üç£","üç§", "üç•", "üç¶", "üçß", "üç®", "üç©", "üç™", "üç´", "üç¨", "üç≠","üçÆ", "üçØ", "üç∞", "üç±", "üç≤", "üç≥", "üç¥", "üçµ", "üç∂", "üç∑","üç∏", "üçπ", "üç∫", "üçª", "üçº", "üçΩ", "üçæ", "üçø", "üéÄ", "üéÅ","üéÇ", "üéÑ", "üéÖ", "üéÜ", "üéá", "üéà", "üéâ", "üéä", "üéå","üéç", "üéè", "üéê", "üéë", "üéí", "üéì", "üéî", "üéï", "üéñ","üéó", "üéú", "üéù", "üé†","üé°", "üé¢", "üé£", "üé§", "üé•", "üé¶", "üéß", "üé®", "üé©", "üé™","üé´", "üé¨", "üé≠", "üéÆ", "üéØ", "üé∞", "üé±", "üé≤", "üé≥", "üé¥","üéµ", "üé∂", "üé∑", "üé∏", "üéπ", "üé∫", "üéª", "üéº", "üéΩ", "üéæ","üéø", "üèÄ", "üèÅ", "üèÇ", "üèÉ", "üèÑ", "üèÖ", "üèÜ", "üèá", "üèà","üèâ", "üèä", "üèã", "üèå", "üèè", "üèê", "üèë", "üèí","üèì", "üè†", "üè°", "üè¢", "üè£", "üè§", "üè¶", "üè®", "üè©", "üè™", "üè´", "üè¨", "üè≠","üè±", "üè≤", "üè≥", "üè¥", "üè∂", "üè∏", "üèπ", "üè∫", "üêÄ", "üêÅ", "üêÇ", "üêÉ", "üêÑ","üêÖ", "üêÜ", "üêá", "üêà", "üêâ", "üêä", "üêã", "üêå", "üêç", "üêé","üêè", "üêê", "üêë", "üêí", "üêì", "üêî", "üêï", "üêñ", "üêó", "üêò","üêô", "üêö", "üêõ", "üêú", "üêù", "üêû", "üêü", "üê†", "üê°", "üê¢","üê£", "üê§", "üê•", "üê¶", "üêß", "üê®", "üê©", "üê™", "üê´", "üê¨","üê≠", "üêÆ", "üêØ", "üê∞", "üê±", "üê≤", "üê≥", "üê¥", "üêµ", "üê∂","üê∑", "üê∏", "üêπ", "üê∫", "üêª", "üêº", "üêæ", "üëÄ", "üëÜ", "üëá", "üëà", "üëâ", "üëä","üëã", "üëå", "üëç", "üëé", "üëè", "üëí", "üëì", "üëî","üëï", "üëñ", "üëó", "üëò", "üëö", "üëú", "üëû","üëü", "üë†", "üë¢", "üë£", "üë§", "üë•", "üë¶", "üëß", "üë®","üë©", "üë´", "üë¨", "üë≠", "üëÆ", "üëØ", "üë∞", "üë±", "üë≤","üë≥", "üë¥", "üëµ", "üë∂", "üíÅ","üíÇ", "üíÉ", "üíÑ", "üíâ", "üíä", "üíã", "üíç", "üíé", "üíê", "üíí", "üíì", "üíî", "üíï","üíñ", "üíó", "üíò", "üíô", "üíö", "üíõ", "üíú", "üíù", "üíû", "üíü","üí†", "üí°", "üí¢", "üí£", "üí§", "üí•", "üí¶", "üíß", "üí®","üí™", "üí´", "üí¨", "üí≠", "üíÆ", "üíØ", "üí∞", "üí±", "üí≤", "üí≥","üí¥", "üíµ", "üí∂", "üí∑", "üí∏", "üíπ", "üí∫", "üíª", "üíº","üíæ", "üíø", "üìÅ", "üìÇ", "üìÉ", "üìÑ", "üìÖ", "üìÜ", "üìá","üìà", "üìâ", "üìä", "üìã", "üìå", "üìç", "üìé", "üìè", "üìê", "üìë","üìí", "üìì", "üìî", "üìï", "üìñ", "üìù", "üìû", "üìü", "üì†", "üì°", "üì¢", "üì£", "üì§", "üì•","üì¶", "üìß", "üì®", "üì©", "üì™", "üì´", "üì¨", "üì≠", "üìÆ", "üìØ","üì∞", "üì±", "üì≤", "üì≥", "üì¥", "üìµ", "üì∂", "üì∑", "üì∏", "üìπ","üì∫", "üìª", "üìº", "üìΩ", "üìæ", "üìø", "üîÄ", "üîÅ", "üîÇ", "üîÉ","üîÑ", "üîÖ", "üîÜ", "üîá", "üîà", "üîâ", "üîä", "üîã", "üîå", "üîç","üîé", "üîè", "üîê", "üîë", "üîí", "üîì", "üîî", "üîï", "üîñ", "üîó","üîò", "üîô", "üîö", "üîõ", "üîú", "üîù", "üî•", "üî¶", "üîß", "üî®", "üî©", "üî™", "üî´","üî¨", "üî≠", "üîÆ", "üî∞", "üî±", "üî≤", "üî≥", "üî¥", "üîµ","üî∂", "üî∑", "üî∏", "üîπ", "üî∫", "üîª", "üîº", "üîΩ", "üïã", "üïå", "üïç", "üïê", "üïë", "üïí", "üïì","üïî", "üïï", "üïñ", "üïó", "üïò", "üïô", "üïö", "üïõ", "üïú", "üïù","üïû", "üïü", "üï†", "üï°", "üï¢", "üï£", "üï§", "üï•", "üï¶", "üïß", "üï¥", "üïµ", "üï∂", "üï∑", "üï∏", "üï∫", "üïª", "üïΩ", "üñÇ", "üñà", "üñâ","üñê", "üñë", "üñí", "üñì", "üññ", "üñ§", "üó≤","üó¥", "üóµ", "üó∑", "üó∏", "üóπ", "üó∫", "üóª", "üóº", "üóΩ", "üóø", "üôÖ", "üôÜ", "üôá", "üôã", "üôå","üôç", "üôé", "üôº", "üôΩ", "üôæ","üôø", "üöÄ", "üöì", "üöî", "üöï", "üöñ", "üöó", "üöò", "üöô", "üöö", "üöõ", "üöú", "üö•", "üö¶","üöß", "üö®", "üö©", "üö™", "üö´", "üö¨", "üö≠", "üöÆ", "üöØ", "üö∞","üö±", "üö≤", "üö≥", "üö¥", "üöµ", "üö∂", "üö∑", "üö∏", "üõë", "üõí", "üõù", "üõü", "üõ´", "üõ¨","üõµ", "üõπ"];
const toggleEmojiPicker = document.querySelector(".toggleEmojiPicker")
toggleEmojiPicker.addEventListener('click', () => {
    emojiPicker.style.display = emojiPicker.style.display === "none" ? "block" : "none";
    if (emojiPicker.innerHTML.trim() === "") {
        emojis.forEach(emoji => {
            const span = document.createElement("span");
            span.textContent = emoji;
            span.style.cursor = "pointer";
            span.style.fontSize = "1rem";
            span.style.margin = "1px";
            span.onclick = () => insertEmoji(emoji);
            emojiPicker.appendChild(span);
        });
    }
})

function insertEmoji(emoji) {
    chatInput.value += emoji;
    chatInput.focus();
}

const getRandomColor = () => {
    const randomIndex = Math.floor(Math.random() * colors.length);
    return colors[randomIndex];
}

const scrollScreen = () => {
    window.scrollTo({
        top: document.body.scrollHeight,
        behavior: "smooth"
    })
}

document.getElementById('onlineUsersSidebarList').addEventListener('click', (e) => {
    const targetId = e.target.dataset.id;
    if (!targetId || targetId === user.id) return;

    const recipient = onlineUsersCache.find(u => u.id === targetId);
    if (recipient) {
        selectedPrivateRecipient = recipient;

        // Cria ID da sala privada
        const privateRoomId = getPrivateRoomId(user.id, selectedPrivateRecipient.id);

        // Envia joinPrivateRoom para o servidor
        socket.send(JSON.stringify({
            type: 'joinPrivateRoom',
            room: privateRoomId,
            userId: user.id,
            userName: user.name,
            userColor: user.color
        }));
        currentRoom = privateRoomId
        updatePrivateChatHeader();
    }
});


const sendMessage = (event) => {
    event.preventDefault();

    const message = {
        type: "message",
        room: currentRoom,
        userId: user.id,
        userName: user.name,
        userColor: user.color,
        content: chatInput.value.replace(/</g,"&lt;").replace(/>/g,"&gt;").trim(),
        image: selectedImageBase64,
        gif: selectedGifBase64,
        audio: selectedAudioBase64,
        video: selectedVideoBase64,
        file: selectedGenericFile,
        fileName: selectedGenericFileName,
        timestamp: new Date().toLocaleTimeString([], { hour:"2-digit", minute:"2-digit"}),
        privateTo: selectedPrivateRecipient?.id || null
    };

    socket.send(JSON.stringify(message));

    chatInput.value = "";
    selectedImageBase64 = null;
    selectedGifBase64 = null;
    selectedAudioBase64 = null;
    selectedVideoBase64 = null;
    selectedGenericFile = null;
    selectedGenericFileName = "";

    const audio = document.getElementById('audioPreview');
    audio.style.display = "none";
    emojiPicker.style.display = "none";
    const pdfPreview = document.getElementById("pdfPreview");
    pdfPreview.style.display = "none";

    document.getElementById('fileLink').style.display = "none";
    document.getElementById('output').src = "";
    document.getElementById('audioPreview').src = "";
    document.getElementById('videoPreview').src = "";
    document.getElementById('videoPreview').style.display = "none";
    
};

chatForm.addEventListener("submit", async (event) => {
    event.preventDefault();
    await cadastrarInfo(user.name, user.id, chatInput.value, url, tempo);
    sendMessage(event);
});